program :	body
body:		stmline*
stm:		var = exp | 
		if exp then stm  |
		if exp then "\n" body endif |
		if exp then "\n" body else "\n" body endif 
		":" label 
		goto label 
stmline:	stm "\n"
var:		numvar
const:		numconst
numvar:		id
label:		id
op:		+  |  -  |  * |  /  | %  |  &  |  "|" |  =  |  <>  |  <  |  >  |  <=  |  >=



LL(1) expression grammar:

exp:		exp3 exp2 
exp2:		or exp | <empty>

exp3:		exp5 exp4 
exp4:		and exp3 | <empty>

exp5:		exp7 exp6 
exp6:		== exp5 | <> exp5 | <empty>

exp7:		exp9 exp8 
exp8:		< exp7 | > exp7 | <= exp7 | >= exp7 | <empty>

exp9:		term1 exp10 
exp10:		+ exp9 | - exp9 | <empty>

term1:		factor term2
term2:		* term1 | / term1 | % term1 | <empty>

factor:		const | var | (exp1) | -factor | not exp1


/////// Interesting templates
Basic4GL
	- "pointers", structs, arrays

FreeBasic
	- Well documented, full type system, pointers, .bi-files for ffi with C code

///////

a = ""
b = 0.0
c = 1
a(2) = ("Jonas", "Test")
c(5) = (1, 2, 3, 4, 5)
b(5) = 0.0 
d(5) = ""        ' ("", "", "", "", "")


type test
	a = ""
	b = 0.0
	c = 1
endtype

k = type test
k(2) = type test
k.a = "Hej"
k.b = 6.0


/////////////

